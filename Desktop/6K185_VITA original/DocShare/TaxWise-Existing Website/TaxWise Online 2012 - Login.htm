<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0058)https://twonline.taxwise.com/User/Login.aspx -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><HTML 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>	TaxWise Online 2012 - Login
</TITLE>
<META content="text/html; charset=utf-8" http-equiv="Content-Type"><LINK rel="stylesheet" 
type="text/css" href="TaxWise%20Online%202012%20-%20Login_files/Login.css">
<META name="GENERATOR" content="MSHTML 9.00.8112.16464"></HEAD>
<BODY>
<FORM id="aspnetForm" onsubmit="javascript:return WebForm_OnSubmit();" method="post" 
name="aspnetForm" action="Login.aspx?ReturnUrl=%2f">
<DIV><INPUT id="__LASTFOCUS" name="__LASTFOCUS" type="hidden"><INPUT id="__EVENTTARGET" 
name="__EVENTTARGET" type="hidden"><INPUT id="__EVENTARGUMENT" name="__EVENTARGUMENT" 
type="hidden"><INPUT id="__VIEWSTATE" name="__VIEWSTATE" value="" 
type="hidden"></DIV>
<SCRIPT type="text/javascript">
//<![CDATA[
var theForm = document.forms['aspnetForm'];
if (!theForm) {
    theForm = document.aspnetForm;
}
function __doPostBack(eventTarget, eventArgument) {
    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {
        theForm.__EVENTTARGET.value = eventTarget;
        theForm.__EVENTARGUMENT.value = eventArgument;
        theForm.submit();
    }
}
//]]>
</SCRIPT>

<SCRIPT type="text/javascript" src="TaxWise%20Online%202012%20-%20Login_files/WebResource.js"></SCRIPT>

<SCRIPT type="text/javascript" src="TaxWise%20Online%202012%20-%20Login_files/ScriptResource.js"></SCRIPT>

<SCRIPT type="text/javascript" src="TaxWise%20Online%202012%20-%20Login_files/ScriptResource(1).js"></SCRIPT>

<SCRIPT type="text/javascript">
//<![CDATA[
if (typeof(Sys) === 'undefined') throw new Error('ASP.NET Ajax client-side framework failed to load.');
//]]>
</SCRIPT>

<SCRIPT type="text/javascript" src="TaxWise%20Online%202012%20-%20Login_files/ScriptResource(2).js"></SCRIPT>

<SCRIPT type="text/javascript">
//<![CDATA[
function WebForm_OnSubmit() {
if (typeof(ValidatorOnSubmit) == "function" && ValidatorOnSubmit() == false) return false;
return true;
}
//]]>
</SCRIPT>

<DIV><INPUT id="__EVENTVALIDATION" name="__EVENTVALIDATION" value="/wEWCQK/m82DDAL2hYmbDAKGzrnXCwKqupm6AwK3zcSIBAL/td62BgLct82RAgKC8er9BgKq88yZA71A9sVPW4gjVDIm2J3iHLKayllq" 
type="hidden"></DIV>
<DIV>
<TABLE 
style="width: 25%; font-size: smaller; margin-top: 0%; margin-left: 22%;">
  <TBODY>
  <TR>
    <TD colSpan="2"><SPAN style="text-align: center;">
      <DIV class="HeaderImageContainer"><IMG style="border-width: 0px;" id="ctl00_ctl04_LogoImage" 
      src="TaxWise%20Online%202012%20-%20Login_files/ClientLoginUnbranded.png"></DIV></SPAN></TD></TR>
  <TR>
    <TD>
      <TABLE style="width: 100%;">
        <TBODY>
        <TR>
          <TD><IMG style="border-width: 0px;" src="TaxWise%20Online%202012%20-%20Login_files/login-graphic.png"></TD></TR>
        <TR>
          <TD>
<SCRIPT type="text/javascript">
//<![CDATA[
Sys.WebForms.PageRequestManager._initialize('ctl00$LoginPlaceHolder$ScriptManager1', 'aspnetForm', [], [], [], 90, 'ctl00');
//]]>
</SCRIPT>

<SCRIPT type="text/javascript" src="TaxWise%20Online%202012%20-%20Login_files/BrowserCheck.js"></SCRIPT>
            <NOSCRIPT>        &lt;center&gt;            &lt;fieldset 
            class="FieldContainer" style="width: 300px; text-align: left; 
            background-color: #ffffe1;"&gt;                The advanced features 
            of this web site require that you enable JavaScript in your          
                  browser. To enable JavaScript in your browser, click on Help 
            button and follow the                instructions.&lt;/fieldset&gt;  
                      &lt;br /&gt;            &lt;br /&gt;            &lt;input 
            type="button" value="Try Again" onclick="window.location.reload();" 
            /&gt;            &lt;input type="submit" 
            name="ctl00$LoginPlaceHolder$JavascriptDisabledHelp" 
            value="&nbsp;Need Help?&nbsp;" 
            onclick="javascript:WebForm_DoPostBackWithOptions(new 
            WebForm_PostBackOptions("ctl00$LoginPlaceHolder$JavascriptDisabledHelp", 
            "", true, "", "", false, false))" 
            id="ctl00_LoginPlaceHolder_JavascriptDisabledHelp" /&gt;        
            &lt;/center&gt;        &lt;br /&gt;        &lt;br /&gt;    
            </NOSCRIPT>
            <DIV style="display: none;" id="BrowserFailed">
            <CENTER>
            <FIELDSET style="width: 300px; text-align: left; background-color: rgb(255, 255, 225);" 
            class="FieldContainer">                This website requires that 
            you use Microsoft Internet Explorer browser 6 or higher              
              in order to work with advanced features of the product. Older 
            browsers are not capable                of performing or displaying 
            many of required functions.            
            </FIELDSET></CENTER><BR><BR></DIV>
            <DIV style="display: none;" id="CookiesNotEnabledDiv">
            <CENTER>
            <FIELDSET style="width: 300px; text-align: left; background-color: rgb(255, 255, 225);" 
            class="FieldContainer">                The advanced features of this 
            web site require that you enable Cookies in your browser.            
                To enable Cookies in your browser, click on Help button and 
            follow the instructions.<BR><BR>                Please make sure you 
            have *.cchsfs.com in your trusted sites.            
            </FIELDSET></CENTER><BR><BR></DIV>
            <CENTER>
            <TABLE>
              <TBODY>
              <TR>
                <TD>
                  <DIV style="display: none;" id="helpdiv"><INPUT onclick="window.location.reload();" value="Try Again" type="button"><INPUT onclick="javascript:window.open('BrowserHelp.htm');" value="&nbsp;Need Help?&nbsp;" type="button"></DIV></TD>
                <TD>
                  <DIV style="display: none;" id="continue"><INPUT style="display: none;" id="ContinueButton" onclick="continueanyway();" value="&nbsp;Continue&nbsp;" type="button"></DIV></TD></TR></TBODY></TABLE></CENTER>
            <DIV id="maincontent">
            <DIV style="width: 80%; text-align: center;" id="PageErrorBox"><SPAN 
            style="color: red;"></SPAN></DIV>
<SCRIPT language="javascript" type="text/javascript">
                    window.attachEvent("onload", initializeForm);
                    function initializeForm() {
                        if (document.getElementById("maincontent").style.display == "") {
                            document.getElementById('ctl00_LoginPlaceHolder_LoginId').focus();
                        }
                    }
                </SCRIPT>

            <TABLE id="InputTable" class="InputTable">
              <TBODY>
              <TR>
                <TD style="text-align: left;" class="Label"><SPAN id="ctl00_LoginPlaceHolder_LoginLabel">Client 
                  ID</SPAN><BR><INPUT style="width: 75px;" id="ctl00_LoginPlaceHolder_LoginId" 
                  class="InputField" name="ctl00$LoginPlaceHolder$LoginId" 
                  maxLength="9" type="text"><SPAN style="color: red; display: none;" 
                  id="ctl00_LoginPlaceHolder_RequiredFieldValidator1" class="FieldErrorIndicator" 
                  title="Client ID is required.">*</SPAN><SPAN style="color: red; display: none;" 
                  id="ctl00_LoginPlaceHolder_LoginClientIdCompareValidator" 
                  class="FieldErrorIndicator">*</SPAN></TD></TR>
              <TR>
                <TD style="text-align: left;" class="Label">                   
                           User Name                            <BR><INPUT id="ctl00_LoginPlaceHolder_LoginUserName" 
                  class="InputField" name="ctl00$LoginPlaceHolder$LoginUserName" 
                  maxLength="100" type="text"><SPAN style="color: red; display: none;" 
                  id="ctl00_LoginPlaceHolder_RequiredFieldValidator2" class="FieldErrorIndicator" 
                  title="User name is required.">*</SPAN></TD></TR>
              <TR>
                <TD style="text-align: left; padding-bottom: 10px;" class="Label"> 
                                             Password<BR><INPUT id="ctl00_LoginPlaceHolder_LoginPassword" 
                  class="InputField" name="ctl00$LoginPlaceHolder$LoginPassword" 
                  type="password"><SPAN style="color: red; visibility: hidden;" 
                  id="ctl00_LoginPlaceHolder_RequiredFieldValidator3" class="FieldErrorIndicator" 
                  title="Password is required.">*</SPAN></TD></TR>
              <TR>
                <TD style="padding-bottom: 10px;"><INPUT style="width: 90px;" id="ctl00_LoginPlaceHolder_LoginButton" class="NavigationButton" onclick='javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions("ctl00$LoginPlaceHolder$LoginButton", "", true, "", "", false, false))' name="ctl00$LoginPlaceHolder$LoginButton" value="Log In" type="submit">&nbsp;&nbsp;&nbsp;<INPUT 
                  id="ctl00_LoginPlaceHolder_RememberMyClientIDAndUserNameCheckbox" 
                  name="ctl00$LoginPlaceHolder$RememberMyClientIDAndUserNameCheckbox" 
                  type="checkbox"><LABEL for="ctl00_LoginPlaceHolder_RememberMyClientIDAndUserNameCheckbox">Remember 
                  Me</LABEL></TD></TR>
              <TR>
                <TD style="text-align: center; color: rgb(102, 102, 102); padding-bottom: 10px;"><STRONG>Warning: 
                                                 <BR>                            
                      Three unsuccessful login attempts<BR>                      
                            will lock your account.</STRONG></TD></TR>
              <TR>
                <TD style="text-align: center; font-weight: bold;"><A id="ctl00_LoginPlaceHolder_ResetPasswordButton" 
                  href="javascript:__doPostBack('ctl00$LoginPlaceHolder$ResetPasswordButton','')">Reset 
                  Password</A></TD></TR></TBODY></TABLE>
            <DIV style="color: red; display: none;" id="ctl00_LoginPlaceHolder_ValidationSummary"></DIV></DIV></TD></TR></TBODY></TABLE></TD>
    <TD style="vertical-align: top;">
      <TABLE class="InputTable">
        <TBODY>
        <TR>
          <TD style="padding-bottom: 12px;"><IMG style="border-width: 0px;" 
            src="TaxWise%20Online%202012%20-%20Login_files/password-req-grc.png"></TD></TR>
        <TR>
          <TD style="border-style: solid; border-color: rgb(51, 51, 51); border-radius: 15px; text-align: right; padding-right: 40px; font-weight: bold; background-color: rgb(230, 230, 230);"><SPAN 
            style="text-align: left;">
            <UL>
              <LI>Must be at least 8 characters in length</LI>
              <LI>Must not exceed 100 characters</LI>
              <LI>Must contain at least one number</LI>
              <LI>Case-sensitive</LI>
              <LI>Cannot contain the user name</LI>
              <LI>Cannot reuse any of your last 10 previous passwords</LI>
              <LI>Must be unique to the Client ID</LI>
              <LI>Passwords expire every 90 days</LI></UL></SPAN><BR><A id="ctl00_TextPlaceHolder_NeedHelpButton" 
            href="javascript:__doPostBack('ctl00$TextPlaceHolder$NeedHelpButton','')">Need 
            Help?</A></TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD style="text-align: center; vertical-align: bottom;" colSpan="2">
      <TABLE id="footer" border="0" cellSpacing="0" cellPadding="0" 
width="100%">
        <TBODY>
        <TR>
          <TD style="height: 26px;" vAlign="middle" colSpan="2" 
            align="center">©&nbsp;2012&nbsp;<SPAN id="ctl00_ctl05_CopyrightLabel">CCH 
            Small Firm Services</SPAN>.&nbsp;&nbsp;All rights 
            reserved.&nbsp;&nbsp;           <BR><A href="https://twonline.taxwise.com/User/Legal/TermsOfService.aspx" 
            target="PolicyWindow">Terms Of Service</A> <!-- &nbsp;|&nbsp; 
            <!-- <a target="PolicyWindow" href="Legal/SecurityStatement.aspx">Security Statement</a> &nbsp;|&nbsp; 
            <a target="PolicyWindow" href="Legal/PrivacyPolicy.aspx">Privacy Policy</a> --></TD></TR>
        </TBODY></TABLE><BR></TD></TR></TBODY></TABLE></DIV>
<SCRIPT type="text/javascript">
//<![CDATA[
var Page_ValidationSummaries =  new Array(document.getElementById("ctl00_LoginPlaceHolder_ValidationSummary"));
var Page_Validators =  new Array(document.getElementById("ctl00_LoginPlaceHolder_RequiredFieldValidator1"), document.getElementById("ctl00_LoginPlaceHolder_LoginClientIdCompareValidator"), document.getElementById("ctl00_LoginPlaceHolder_RequiredFieldValidator2"), document.getElementById("ctl00_LoginPlaceHolder_RequiredFieldValidator3"));
//]]>
</SCRIPT>

<SCRIPT type="text/javascript">
//<![CDATA[
var ctl00_LoginPlaceHolder_RequiredFieldValidator1 = document.all ? document.all["ctl00_LoginPlaceHolder_RequiredFieldValidator1"] : document.getElementById("ctl00_LoginPlaceHolder_RequiredFieldValidator1");
ctl00_LoginPlaceHolder_RequiredFieldValidator1.controltovalidate = "ctl00_LoginPlaceHolder_LoginId";
ctl00_LoginPlaceHolder_RequiredFieldValidator1.errormessage = "Client ID is required.";
ctl00_LoginPlaceHolder_RequiredFieldValidator1.display = "Dynamic";
ctl00_LoginPlaceHolder_RequiredFieldValidator1.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00_LoginPlaceHolder_RequiredFieldValidator1.initialvalue = "";
var ctl00_LoginPlaceHolder_LoginClientIdCompareValidator = document.all ? document.all["ctl00_LoginPlaceHolder_LoginClientIdCompareValidator"] : document.getElementById("ctl00_LoginPlaceHolder_LoginClientIdCompareValidator");
ctl00_LoginPlaceHolder_LoginClientIdCompareValidator.controltovalidate = "ctl00_LoginPlaceHolder_LoginId";
ctl00_LoginPlaceHolder_LoginClientIdCompareValidator.errormessage = "Client ID must be a number";
ctl00_LoginPlaceHolder_LoginClientIdCompareValidator.display = "Dynamic";
ctl00_LoginPlaceHolder_LoginClientIdCompareValidator.type = "Integer";
ctl00_LoginPlaceHolder_LoginClientIdCompareValidator.evaluationfunction = "CompareValidatorEvaluateIsValid";
ctl00_LoginPlaceHolder_LoginClientIdCompareValidator.operator = "DataTypeCheck";
var ctl00_LoginPlaceHolder_RequiredFieldValidator2 = document.all ? document.all["ctl00_LoginPlaceHolder_RequiredFieldValidator2"] : document.getElementById("ctl00_LoginPlaceHolder_RequiredFieldValidator2");
ctl00_LoginPlaceHolder_RequiredFieldValidator2.controltovalidate = "ctl00_LoginPlaceHolder_LoginUserName";
ctl00_LoginPlaceHolder_RequiredFieldValidator2.errormessage = "User name is required.";
ctl00_LoginPlaceHolder_RequiredFieldValidator2.display = "Dynamic";
ctl00_LoginPlaceHolder_RequiredFieldValidator2.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00_LoginPlaceHolder_RequiredFieldValidator2.initialvalue = "";
var ctl00_LoginPlaceHolder_RequiredFieldValidator3 = document.all ? document.all["ctl00_LoginPlaceHolder_RequiredFieldValidator3"] : document.getElementById("ctl00_LoginPlaceHolder_RequiredFieldValidator3");
ctl00_LoginPlaceHolder_RequiredFieldValidator3.controltovalidate = "ctl00_LoginPlaceHolder_LoginPassword";
ctl00_LoginPlaceHolder_RequiredFieldValidator3.errormessage = "Password is required.";
ctl00_LoginPlaceHolder_RequiredFieldValidator3.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00_LoginPlaceHolder_RequiredFieldValidator3.initialvalue = "";
var ctl00_LoginPlaceHolder_ValidationSummary = document.all ? document.all["ctl00_LoginPlaceHolder_ValidationSummary"] : document.getElementById("ctl00_LoginPlaceHolder_ValidationSummary");
ctl00_LoginPlaceHolder_ValidationSummary.displaymode = "List";
//]]>
</SCRIPT>

<SCRIPT type="text/javascript">
//<![CDATA[
requirementscheck();
var Page_ValidationActive = false;
if (typeof(ValidatorOnLoad) == "function") {
    ValidatorOnLoad();
}

function ValidatorOnSubmit() {
    if (Page_ValidationActive) {
        return ValidatorCommonOnSubmit();
    }
    else {
        return true;
    }
}
        
document.getElementById('ctl00_LoginPlaceHolder_ValidationSummary').dispose = function() {
    Array.remove(Page_ValidationSummaries, document.getElementById('ctl00_LoginPlaceHolder_ValidationSummary'));
}

document.getElementById('ctl00_LoginPlaceHolder_RequiredFieldValidator1').dispose = function() {
    Array.remove(Page_Validators, document.getElementById('ctl00_LoginPlaceHolder_RequiredFieldValidator1'));
}

document.getElementById('ctl00_LoginPlaceHolder_LoginClientIdCompareValidator').dispose = function() {
    Array.remove(Page_Validators, document.getElementById('ctl00_LoginPlaceHolder_LoginClientIdCompareValidator'));
}

document.getElementById('ctl00_LoginPlaceHolder_RequiredFieldValidator2').dispose = function() {
    Array.remove(Page_Validators, document.getElementById('ctl00_LoginPlaceHolder_RequiredFieldValidator2'));
}

document.getElementById('ctl00_LoginPlaceHolder_RequiredFieldValidator3').dispose = function() {
    Array.remove(Page_Validators, document.getElementById('ctl00_LoginPlaceHolder_RequiredFieldValidator3'));
}
//]]>
</SCRIPT>
</FORM></BODY></HTML>
